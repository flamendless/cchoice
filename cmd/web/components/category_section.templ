package components

import (
	"cchoice/cmd/web/models"
	"cchoice/internal/constants"
	"fmt"
)

templ CategorySectionProducts(data models.CategorySectionProducts) {
	<div id={ "category-sections-" + data.ID }>
		if data.Subcategory != data.Category {
			<p class="text-sm font-normal text-cchoice_dark m-2 ml-4 my-0">
				{ data.Subcategory }
			</p>
		}
		<div class="flex flex-row">
			for _, product := range data.Products {
				<div class="group flex flex-col items-center m-2 ml-4 hover:bg-cchoicesoft">
					if product.Thumbnail == constants.PathEmptyImage {
						<img
							class="w-24 max-w-24 h-24"
							src="/cchoice/static/images/empty_96x96.webp"
							alt="empty placeholder image"
						/>
					} else {
						<img
							class="w-24 max-w-24 h-24"
							src="/cchoice/static/images/empty_96x96.webp"
							hx-get={ string(templ.URL("/cchoice/thumbnail?size=96x96&path=/cchoice/" + product.Thumbnail)) }
							hx-swap="none"
							hx-target="this"
							hx-on::after-request="event.detail.target.src=event.detail.xhr.responseText"
							hx-trigger="load"
							alt="product thumbnail"
						/>
					}
					<p
						title={ product.Name }
						class="max-w-24 text-xs font-normal text-ellipsis text-nowrap overflow-hidden group-hover:font-bold"
					>
						{ product.Name }
					</p>
					<p class="text-xs font-light group-hover:font-semibold">
						{ product.BrandName }
					</p>
				</div>
			}
		</div>
	</div>
}

templ CategorySection(page int, categories []models.GroupedCategorySection) {
	for i, category := range categories {
		<div>
			<p class="text-base font-medium text-cchoice_dark m-2 my-0">
				{ category.Label }
			</p>
			for _, subcategory := range category.Subcategories {
				<div
					class="w-full ml-0.5 pr-6 border-cchoice_border"
					hx-trigger="load once"
					hx-get={ "/cchoice/product-categories/" + subcategory.CategoryID + "/products" }
					hx-select={ "#category-sections-" + subcategory.CategoryID }
					hx-target={ "#category-sections-" + subcategory.CategoryID }
					hx-swap="outerHTML"
				>
					@CategorySectionProducts(models.CategorySectionProducts{
						ID:          subcategory.CategoryID,
						Category:    category.Label,
						Subcategory: subcategory.Label,
					})
				</div>
			}
		</div>
		if category.Label != "" {
			@HR()
		}
		if i == len(categories)-1 {
			<div
				class="category-sections-inf-load py-32"
				hx-get={ fmt.Sprintf("/cchoice/product-categories/sections?page=%d", page+1) }
				hx-target=".category-sections-inf-load"
				hx-swap="outerHTML"
				hx-trigger={ fmt.Sprintf("load delay:%ds", page/4) }
			></div>
		}
	}
	if len(categories) != 0 {
		<div class="py-4"></div>
	}
}

templ AllCategorySections() {
	<div
		class="w-full"
		hx-trigger="load once"
		hx-get={ fmt.Sprintf("/cchoice/product-categories/sections?page=%d", 0) }
		hx-target="#category-sections"
		hx-swap="beforeend"
	>
		<p class="text-xs font-normal m-2 my-0">
			All Categories
		</p>
		@HR()
		<div
			id="category-sections"
			class="w-full flex flex-col h-screen overflow-x-hidden overflow-y-scroll scrollbar-hide"
		>
			@CategorySection(0, nil)
		</div>
	</div>
}
