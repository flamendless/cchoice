package components

import (
	"cchoice/cmd/web/models"
	"cchoice/internal/conf"
	"fmt"
)

var fetchMult = 0.4

func init() {
	if conf.Conf().IsLocal() {
		fetchMult = 0.1
	}
}

templ CategorySectionProducts(data models.CategorySectionProducts) {
	<div id={ "category-sections-" + data.ID }>
		if data.Subcategory != data.Category {
			<p class="text-sm font-normal text-cchoice_dark m-2 ml-4 my-0">
				{ data.Subcategory }
			</p>
		}
		<div class="flex flex-row flex-wrap">
			for _, product := range data.Products {
				<div class="group flex flex-col items-center m-2 ml-4 hover:bg-cchoicesoft transition-colors">
					<img
						hx-get={ "/cchoice/products/image?thumbnail=1&size=1080x1080&path=" + product.ThumbnailPath }
						hx-trigger="click"
						hx-target="#modal_image_viewer .modal-content img"
						hx-select="img"
						hx-swap="outerHTML"
						class="w-24 max-w-24 h-24 cursor-zoom-in"
						src={ product.ThumbnailData }
						title="show high-quality image"
						alt={ product.Name + " thumbnail" }
						loading="lazy"
						data-product-id={ product.ProductID }
						_="
							on click
								set #selected-product-id.value to my @data-product-id
								log 'selected: ' + #selected-product-id.value
								log 'product-id: ' + @data-product-id
								trigger openModal on #modal_image_viewer
							end
						"
					/>
					<div
						title={ product.Name }
						class="cursor-pointer flex flex-col items-center"
					>
						<p class="max-w-24 text-xs font-normal text-ellipsis text-nowrap overflow-hidden group-hover:font-bold transition-colors">
							{ product.Name }
						</p>
						<p class="text-xs font-light group-hover:font-semibold transition-colors">
							{ product.BrandName }
						</p>
					</div>
				</div>
			}
		</div>
	</div>
}

templ CategorySection(page int, categories []models.GroupedCategorySection) {
	for i, category := range categories {
		<div>
			<p class="text-base font-medium text-cchoice_dark m-2 my-0">
				{ category.Label }
			</p>
			for _, subcategory := range category.Subcategories {
				<div
					class="w-full ml-0.5 pr-6 border-cchoice_border"
					hx-trigger="load once, history:restore"
					hx-get={ "/cchoice/product-categories/" + subcategory.CategoryID + "/products" }
					hx-target={ "#category-sections-" + subcategory.CategoryID }
					hx-swap="innerHTML"
				>
					<div id={ "category-sections-" + subcategory.CategoryID }>
						@CategorySectionProducts(models.CategorySectionProducts{
							ID:          subcategory.CategoryID,
							Category:    category.Label,
							Subcategory: subcategory.Label,
						})
					</div>
				</div>
			}
		</div>
		if category.Label != "" {
			@HR()
		}
		if i == len(categories)-1 {
			<div
				class="category-sections-inf-load"
				hx-get={ fmt.Sprintf("/cchoice/product-categories/sections?page=%d", page+1) }
				hx-target=".category-sections-inf-load"
				hx-swap="outerHTML"
				hx-trigger={ fmt.Sprintf("load delay:%fs, history:restore", float64(page)*fetchMult) }
			></div>
		}
	}
}

templ AllCategorySections() {
	@ModalProductImageViewer("", "")
	<div
		id="all-category-sections"
		class="w-full overflow-x-hidden"
		hx-trigger="load once, history:restore"
		hx-get={ fmt.Sprintf("/cchoice/product-categories/sections?page=%d", 0) }
		hx-target="#category-sections"
		hx-swap="beforeend"
	>
		<div class="sticky top-0 bg-white z-20 flex flex-row justify-between items-center px-2">
			<p class="text-xs font-normal">
				All Categories
			</p>
		</div>
		@HR()
		<div
			id="category-sections"
			class="w-full flex flex-col overflow-x-hidden"
		>
			@CategorySection(0, nil)
		</div>
	</div>
}
