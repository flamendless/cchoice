package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
)

func gitDescribe(pattern string) string {
	cmd := exec.Command("git", "describe", "--tags", "--abbrev=0", "--match", pattern)
	var out bytes.Buffer
	cmd.Stdout = &out
	if err := cmd.Run(); err != nil {
		return ""
	}
	return string(bytes.TrimSpace(out.Bytes()))
}

func main() {
	dev := gitDescribe("dev-v*")
	if dev == "" {
		dev = "dev"
	}
	rel := gitDescribe("release-v*")
	if rel == "" {
		rel = "release"
	}

	content := fmt.Sprintf(`// Code generated by go:generate; DO NOT EDIT.
package conf

func init() {
    GitTagDev = %q
    GitTagProd = %q
}
`, dev, rel)

	// go:generate runs in internal/conf, write the file there
	outPath := "version_gen.go"
	if err := os.WriteFile(outPath, []byte(content), 0644); err != nil {
		fmt.Fprintf(os.Stderr, "failed to write %s: %v\n", outPath, err)
		os.Exit(1)
	}
}
