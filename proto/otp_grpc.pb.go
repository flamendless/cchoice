// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: proto/otp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OTPServiceClient is the client API for OTPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTPServiceClient interface {
	GetOTPInfo(ctx context.Context, in *GetOTPInfoRequest, opts ...grpc.CallOption) (*GetOTPInfoResponse, error)
	EnrollOTP(ctx context.Context, in *EnrollOTPRequest, opts ...grpc.CallOption) (*EnrollOTPResponse, error)
	GenerateOTPCode(ctx context.Context, in *GenerateOTPCodeRequest, opts ...grpc.CallOption) (*GenerateOTPCodeResponse, error)
	FinishOTPEnrollment(ctx context.Context, in *FinishOTPEnrollmentRequest, opts ...grpc.CallOption) (*FinishOTPEnrollmentResponse, error)
	ValidateOTP(ctx context.Context, in *ValidateOTPRequest, opts ...grpc.CallOption) (*ValidateOTPResponse, error)
}

type oTPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOTPServiceClient(cc grpc.ClientConnInterface) OTPServiceClient {
	return &oTPServiceClient{cc}
}

func (c *oTPServiceClient) GetOTPInfo(ctx context.Context, in *GetOTPInfoRequest, opts ...grpc.CallOption) (*GetOTPInfoResponse, error) {
	out := new(GetOTPInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.OTPService/GetOTPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTPServiceClient) EnrollOTP(ctx context.Context, in *EnrollOTPRequest, opts ...grpc.CallOption) (*EnrollOTPResponse, error) {
	out := new(EnrollOTPResponse)
	err := c.cc.Invoke(ctx, "/proto.OTPService/EnrollOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTPServiceClient) GenerateOTPCode(ctx context.Context, in *GenerateOTPCodeRequest, opts ...grpc.CallOption) (*GenerateOTPCodeResponse, error) {
	out := new(GenerateOTPCodeResponse)
	err := c.cc.Invoke(ctx, "/proto.OTPService/GenerateOTPCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTPServiceClient) FinishOTPEnrollment(ctx context.Context, in *FinishOTPEnrollmentRequest, opts ...grpc.CallOption) (*FinishOTPEnrollmentResponse, error) {
	out := new(FinishOTPEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/proto.OTPService/FinishOTPEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTPServiceClient) ValidateOTP(ctx context.Context, in *ValidateOTPRequest, opts ...grpc.CallOption) (*ValidateOTPResponse, error) {
	out := new(ValidateOTPResponse)
	err := c.cc.Invoke(ctx, "/proto.OTPService/ValidateOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTPServiceServer is the server API for OTPService service.
// All implementations must embed UnimplementedOTPServiceServer
// for forward compatibility
type OTPServiceServer interface {
	GetOTPInfo(context.Context, *GetOTPInfoRequest) (*GetOTPInfoResponse, error)
	EnrollOTP(context.Context, *EnrollOTPRequest) (*EnrollOTPResponse, error)
	GenerateOTPCode(context.Context, *GenerateOTPCodeRequest) (*GenerateOTPCodeResponse, error)
	FinishOTPEnrollment(context.Context, *FinishOTPEnrollmentRequest) (*FinishOTPEnrollmentResponse, error)
	ValidateOTP(context.Context, *ValidateOTPRequest) (*ValidateOTPResponse, error)
	mustEmbedUnimplementedOTPServiceServer()
}

// UnimplementedOTPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOTPServiceServer struct {
}

func (UnimplementedOTPServiceServer) GetOTPInfo(context.Context, *GetOTPInfoRequest) (*GetOTPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTPInfo not implemented")
}
func (UnimplementedOTPServiceServer) EnrollOTP(context.Context, *EnrollOTPRequest) (*EnrollOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollOTP not implemented")
}
func (UnimplementedOTPServiceServer) GenerateOTPCode(context.Context, *GenerateOTPCodeRequest) (*GenerateOTPCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOTPCode not implemented")
}
func (UnimplementedOTPServiceServer) FinishOTPEnrollment(context.Context, *FinishOTPEnrollmentRequest) (*FinishOTPEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOTPEnrollment not implemented")
}
func (UnimplementedOTPServiceServer) ValidateOTP(context.Context, *ValidateOTPRequest) (*ValidateOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOTP not implemented")
}
func (UnimplementedOTPServiceServer) mustEmbedUnimplementedOTPServiceServer() {}

// UnsafeOTPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTPServiceServer will
// result in compilation errors.
type UnsafeOTPServiceServer interface {
	mustEmbedUnimplementedOTPServiceServer()
}

func RegisterOTPServiceServer(s grpc.ServiceRegistrar, srv OTPServiceServer) {
	s.RegisterService(&OTPService_ServiceDesc, srv)
}

func _OTPService_GetOTPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).GetOTPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OTPService/GetOTPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).GetOTPInfo(ctx, req.(*GetOTPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTPService_EnrollOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).EnrollOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OTPService/EnrollOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).EnrollOTP(ctx, req.(*EnrollOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTPService_GenerateOTPCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOTPCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).GenerateOTPCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OTPService/GenerateOTPCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).GenerateOTPCode(ctx, req.(*GenerateOTPCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTPService_FinishOTPEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishOTPEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).FinishOTPEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OTPService/FinishOTPEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).FinishOTPEnrollment(ctx, req.(*FinishOTPEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTPService_ValidateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).ValidateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OTPService/ValidateOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).ValidateOTP(ctx, req.(*ValidateOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OTPService_ServiceDesc is the grpc.ServiceDesc for OTPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OTPService",
	HandlerType: (*OTPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOTPInfo",
			Handler:    _OTPService_GetOTPInfo_Handler,
		},
		{
			MethodName: "EnrollOTP",
			Handler:    _OTPService_EnrollOTP_Handler,
		},
		{
			MethodName: "GenerateOTPCode",
			Handler:    _OTPService_GenerateOTPCode_Handler,
		},
		{
			MethodName: "FinishOTPEnrollment",
			Handler:    _OTPService_FinishOTPEnrollment_Handler,
		},
		{
			MethodName: "ValidateOTP",
			Handler:    _OTPService_ValidateOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/otp.proto",
}
