package components

import (
	"cchoice/client/common"
	pb "cchoice/proto"
	"fmt"
)

const MAX_PRODUCTS_CATEGORIES_DISPLAY = 6

func styleProductsCategoriesRow(even bool) string {
	class := "flex items-center place-content-center"
	if even {
		class += " flex-row "
	} else {
		class += " flex-row-reverse "
	}
	return class
}

func styleProductsCategoriesElem(even bool, isCategory bool) string {
	class := "px-8 py-20 w-1/2"
	if even {
		class += " text-right ml-7 "
	} else {
		class += " text-left mr-7 "
	}

	if isCategory {
		class += " bg-cchoice "
	}

	return class
}

templ ShopProductsCategories(productCategories []*common.ShopProductCategory) {
	<div
		class="m-1 flex flex-col items-center place-content-center"
		hx-trigger="load once"
		hx-get={ fmt.Sprintf("/home/product-category?limit=%d", MAX_PRODUCTS_CATEGORIES_DISPLAY*2) }
		hx-swap="outerHTML"
		hx-target="#products_categories"
		hx-select="#products_categories"
	>
		<div
			id="products_categories"
			class="w-screen"
		>
			for i := 0; i < min(len(productCategories), MAX_PRODUCTS_CATEGORIES_DISPLAY); i++ {
				<div
					id={ "product_category-" + productCategories[i].ID }
					class={ styleProductsCategoriesRow(i%2 == 0) }
				>
					<div class={ styleProductsCategoriesElem(i%2 == 0, true) }>
						<a
							href={ templ.URL("/product-category/" + productCategories[i].ID) }
							class="text-white text-3xl font-bold"
						>
							{ productCategories[i].Category }
						</a>
					</div>
					<div
						class={ styleProductsCategoriesElem(i%2 != 0, false) }
						hx-get={ fmt.Sprintf("/product-category/%s/products?limit=%d", productCategories[i].ID, 10) }
						hx-swap="outerHTML"
						hx-trigger="load once"
						hx-target={ "#products_categories_products_" + productCategories[i].ID }
						hx-select={ "#products_categories_products_" + productCategories[i].ID }
					>
						@ShopCategoryProducts(productCategories[i].ID, []*pb.ProductByCategory{})
					</div>
				</div>
			}
		</div>
	</div>
}

templ ShopCategoryProducts(categoryID string, categoryProducts []*pb.ProductByCategory) {
	<div id={ "products_categories_products_" + categoryID }>
		for i := 0; i < min(len(categoryProducts), MAX_PRODUCTS_CATEGORIES_DISPLAY); i++ {
			<h1>
				{ categoryProducts[i].Name }
			</h1>
		}
	</div>
}
