package components

import (
	"cchoice/client/common"
	pb "cchoice/proto"
	"fmt"
	"cchoice/client/components/svg"
)

const (
	MAX_PRODUCTS_CATEGORIES_DISPLAY = 6
	MAX_PRODUCTS_CATEGORY_PRODUCTS = 24
)

var onceProductCategoryImageJS = templ.NewOnceHandle()

func styleProductsCategoriesRow(even bool) string {
	class := "flex items-center place-content-center"
	if even {
		class += " flex-row "
	} else {
		class += " flex-row-reverse "
	}
	return class
}

func styleProductsCategoriesElem(even bool, isCategory bool) string {
	class := "flex h-screen w-1/2 min-w-1/2 max-w-1/2 max-h-56"
	if even {
		class += " text-right flex-row-reverse"
	} else {
		class += " text-left flex-row"
	}

	if isCategory {
		class += " bg-cchoice "
	}

	return class
}

templ ShopProductsCategories(productCategories []*common.ShopProductCategory) {
	<div
		class="m-1 flex flex-col items-center place-content-center"
		hx-trigger="load once"
		hx-get={ string(templ.URL(fmt.Sprintf("/home/product-category?limit=%d", MAX_PRODUCTS_CATEGORIES_DISPLAY*2))) }
		hx-swap="outerHTML"
		hx-target="#products_categories"
		hx-select="#products_categories"
	>
		<div
			id="products_categories"
			class="w-screen"
		>
			for i := 0; i < min(len(productCategories), MAX_PRODUCTS_CATEGORIES_DISPLAY); i++ {
				<div
					id={ "product_category-" + productCategories[i].ID }
					class={ styleProductsCategoriesRow(i%2 == 0) }
				>
					<div class={ styleProductsCategoriesElem(i%2 == 0, true) }>
						<a
							href={ templ.URL("/product-category/" + productCategories[i].ID) }
							class="text-white text-3xl font-bold my-auto text-center mx-10"
						>
							{ productCategories[i].Category }
						</a>
					</div>
					<div
						class={ styleProductsCategoriesElem(i%2 != 0, false) }
						hx-get={ string(templ.URL(fmt.Sprintf("/product-category/%s/products?row=%d&limit=%d", productCategories[i].ID, i, MAX_PRODUCTS_CATEGORIES_DISPLAY))) }
						hx-swap="outerHTML"
						hx-trigger="load once"
						hx-target={ "#products_categories_products_" + productCategories[i].ID }
						hx-select={ "#products_categories_products_" + productCategories[i].ID }
					>
						@ShopCategoryProducts(i, productCategories[i].ID, []*pb.ProductByCategory{})
					</div>
				</div>
			}
		</div>
	</div>
	@onceProductCategoryImageJS.Once() {
		<script type="text/javascript" src={ string(templ.URL("/static/js/product_category_images.js")) }></script>
	}
}

templ ShopCategoryProducts(row int, categoryID string, categoryProducts []*pb.ProductByCategory) {
	<div
		id={ "products_categories_products_" + categoryID }
		if row%2 == 0 {
			class="flex flex-row mx-2 overflow-x-scroll overflow-y-hidden no-scrollbar auto-scroll"
		} else {
			class="flex flex-row-reverse mx-2 overflow-x-scroll overflow-y-hidden no-scrollbar auto-scroll"
		}
	>
		for i := 0; i < min(len(categoryProducts), MAX_PRODUCTS_CATEGORY_PRODUCTS); i++ {
			<div
				class="flex flex-col items-center place-content-center max-h-56 mb-auto my-2"
			>
				<img
					class="max-w-48 min-h-48 max-h-48 mx-2"
					src={ string(templ.URL(categoryProducts[i].Thumbnail)) }
					alt={ "thumbnail of " + categoryProducts[i].Name }
				/>
				<span class="text-sm font-semibold m-auto text-cchoice">
					{ categoryProducts[i].UnitPriceWithVatDisplay }
				</span>
			</div>
		}

		<div
			if row%2 == 0 {
				class="btn-next-right self-center place-self-center m-auto"
			} else {
				class="btn-next-left self-center place-self-center m-auto"
			}
		>
			<button class="max-h-48 h-48">
				if row%2 == 0 {
					@svg.Right()
				} else {
					@svg.Left()
				}
			</button>
		</div>
	</div>
}
