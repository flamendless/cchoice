// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: brand.sql

package queries

import (
	"context"
	"time"
)

const createBrandImages = `-- name: CreateBrandImages :one
INSERT INTO tbl_brand_images (
	brand_id,
	path,
	is_main,
	created_at,
	updated_at,
	deleted_at
) VALUES (
	?, ?, ?,
	?, ?, ?
) RETURNING id
`

type CreateBrandImagesParams struct {
	BrandID   int64
	Path      string
	IsMain    bool
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt time.Time
}

func (q *Queries) CreateBrandImages(ctx context.Context, arg CreateBrandImagesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createBrandImages,
		arg.BrandID,
		arg.Path,
		arg.IsMain,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createBrands = `-- name: CreateBrands :one
INSERT INTO tbl_brands (
	name,
	created_at,
	updated_at,
	deleted_at
) VALUES (
	?, ?, ?, ?
) RETURNING id
`

type CreateBrandsParams struct {
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt time.Time
}

func (q *Queries) CreateBrands(ctx context.Context, arg CreateBrandsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createBrands,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getBrandsByID = `-- name: GetBrandsByID :one
SELECT
	tbl_brands.id, tbl_brands.name, tbl_brands.created_at, tbl_brands.updated_at, tbl_brands.deleted_at,
	tbl_brand_images.id AS brand_image_id,
	tbl_brand_images.path AS path
FROM tbl_brands
INNER JOIN tbl_brand_images ON tbl_brand_images.brand_id = tbl_brands.id
WHERE
	tbl_brands.id = ?
LIMIT 1
`

type GetBrandsByIDRow struct {
	ID           int64
	Name         string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	DeletedAt    time.Time
	BrandImageID int64
	Path         string
}

func (q *Queries) GetBrandsByID(ctx context.Context, id int64) (GetBrandsByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBrandsByID, id)
	var i GetBrandsByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BrandImageID,
		&i.Path,
	)
	return i, err
}

const getBrandsIDByName = `-- name: GetBrandsIDByName :one
SELECT id
FROM tbl_brands
WHERE
	name = ?
LIMIT 1
`

func (q *Queries) GetBrandsIDByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBrandsIDByName, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getBrandsLogos = `-- name: GetBrandsLogos :many
SELECT
	tbl_brands.id AS id,
	tbl_brands.name AS name,
	tbl_brand_images.id AS brand_image_id,
	tbl_brand_images.path AS path
FROM tbl_brands
INNER JOIN tbl_brand_images ON tbl_brand_images.brand_id = tbl_brands.id
WHERE
	tbl_brand_images.is_main = true
ORDER BY tbl_brands.created_at DESC
LIMIT ?
`

type GetBrandsLogosRow struct {
	ID           int64
	Name         string
	BrandImageID int64
	Path         string
}

func (q *Queries) GetBrandsLogos(ctx context.Context, limit int64) ([]GetBrandsLogosRow, error) {
	rows, err := q.db.QueryContext(ctx, getBrandsLogos, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrandsLogosRow
	for rows.Next() {
		var i GetBrandsLogosRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BrandImageID,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
