// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otp.sql

package queries

import (
	"context"
	"database/sql"
)

const createInitialAuth = `-- name: CreateInitialAuth :exec
;

INSERT INTO tbl_auth (
	user_id,
	token,
	otp_enabled
) VALUES (
	?,
	'',
	false
)
`

func (q *Queries) CreateInitialAuth(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, createInitialAuth, userID)
	return err
}

const enrollOTP = `-- name: EnrollOTP :exec
UPDATE tbl_auth
SET
	otp_secret = ?,
	recovery_codes = ?
WHERE user_id = ?
`

type EnrollOTPParams struct {
	OtpSecret     sql.NullString
	RecoveryCodes sql.NullString
	UserID        int64
}

func (q *Queries) EnrollOTP(ctx context.Context, arg EnrollOTPParams) error {
	_, err := q.db.ExecContext(ctx, enrollOTP, arg.OtpSecret, arg.RecoveryCodes, arg.UserID)
	return err
}

const finishOTPEnrollment = `-- name: FinishOTPEnrollment :exec
;

UPDATE tbl_auth
SET otp_enabled = true
WHERE
	user_id = ? AND
	otp_enabled = false
`

func (q *Queries) FinishOTPEnrollment(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, finishOTPEnrollment, userID)
	return err
}

const getAuthForOTPValidation = `-- name: GetAuthForOTPValidation :one
;

SELECT id, otp_secret
FROM tbl_auth
WHERE user_id = ?
LIMIT 1
`

type GetAuthForOTPValidationRow struct {
	ID        int64
	OtpSecret sql.NullString
}

func (q *Queries) GetAuthForOTPValidation(ctx context.Context, userID int64) (GetAuthForOTPValidationRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthForOTPValidation, userID)
	var i GetAuthForOTPValidationRow
	err := row.Scan(&i.ID, &i.OtpSecret)
	return i, err
}

const getOTPEnabledByUserID = `-- name: GetOTPEnabledByUserID :one
SELECT otp_enabled
FROM tbl_auth
WHERE user_id = ?
LIMIT 1
`

func (q *Queries) GetOTPEnabledByUserID(ctx context.Context, userID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, getOTPEnabledByUserID, userID)
	var otp_enabled bool
	err := row.Scan(&otp_enabled)
	return otp_enabled, err
}
