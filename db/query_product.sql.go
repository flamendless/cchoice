// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (
	name,
	description,
	product_type_id,
	product_category_id,
	unit_price_without_vat,
	unit_price_with_vat,
	unit_price_without_vat_currency,
	unit_price_with_vat_currency,
	created_at,
	updated_at,
	deleted_at
) VALUES (
	?, ?, ?, ?,
	?, ?,
	?, ?,
	?, ?, ?
) RETURNING id, name, description, product_category_id, product_type_id, unit_price_without_vat, unit_price_with_vat, unit_price_without_vat_currency, unit_price_with_vat_currency, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	Name                        string
	Description                 sql.NullString
	ProductTypeID               sql.NullInt64
	ProductCategoryID           sql.NullInt64
	UnitPriceWithoutVat         int64
	UnitPriceWithVat            int64
	UnitPriceWithoutVatCurrency string
	UnitPriceWithVatCurrency    string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.ProductTypeID,
		arg.ProductCategoryID,
		arg.UnitPriceWithoutVat,
		arg.UnitPriceWithVat,
		arg.UnitPriceWithoutVatCurrency,
		arg.UnitPriceWithVatCurrency,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProductCategoryID,
		&i.ProductTypeID,
		&i.UnitPriceWithoutVat,
		&i.UnitPriceWithVat,
		&i.UnitPriceWithoutVatCurrency,
		&i.UnitPriceWithVatCurrency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT product.id, name, description, product_category_id, product_type_id, unit_price_without_vat, unit_price_with_vat, unit_price_without_vat_currency, unit_price_with_vat_currency, created_at, updated_at, deleted_at, product_category.id, category, subcategory, product_type.id, colours, sizes, segmentation
FROM product
INNER JOIN product_category ON product.product_category_id = product_category.id
INNER JOIN product_type ON product.product_type_id = product_type.id
WHERE product.id = ?
LIMIT 1
`

type GetProductRow struct {
	ID                          int64
	Name                        string
	Description                 sql.NullString
	ProductCategoryID           sql.NullInt64
	ProductTypeID               sql.NullInt64
	UnitPriceWithoutVat         int64
	UnitPriceWithVat            int64
	UnitPriceWithoutVatCurrency string
	UnitPriceWithVatCurrency    string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
	ID_2                        int64
	Category                    sql.NullString
	Subcategory                 sql.NullString
	ID_3                        int64
	Colours                     sql.NullString
	Sizes                       sql.NullString
	Segmentation                sql.NullString
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProductCategoryID,
		&i.ProductTypeID,
		&i.UnitPriceWithoutVat,
		&i.UnitPriceWithVat,
		&i.UnitPriceWithoutVatCurrency,
		&i.UnitPriceWithVatCurrency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.Category,
		&i.Subcategory,
		&i.ID_3,
		&i.Colours,
		&i.Sizes,
		&i.Segmentation,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT product.id, name, description, product_category_id, product_type_id, unit_price_without_vat, unit_price_with_vat, unit_price_without_vat_currency, unit_price_with_vat_currency, created_at, updated_at, deleted_at, product_category.id, category, subcategory, product_type.id, colours, sizes, segmentation
FROM product
INNER JOIN product_category ON product.product_category_id = product_category.id
INNER JOIN product_type ON product.product_type_id = product_type.id
ORDER BY created_at DESC
`

type GetProductsRow struct {
	ID                          int64
	Name                        string
	Description                 sql.NullString
	ProductCategoryID           sql.NullInt64
	ProductTypeID               sql.NullInt64
	UnitPriceWithoutVat         int64
	UnitPriceWithVat            int64
	UnitPriceWithoutVatCurrency string
	UnitPriceWithVatCurrency    string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
	ID_2                        int64
	Category                    sql.NullString
	Subcategory                 sql.NullString
	ID_3                        int64
	Colours                     sql.NullString
	Sizes                       sql.NullString
	Segmentation                sql.NullString
}

func (q *Queries) GetProducts(ctx context.Context) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ProductCategoryID,
			&i.ProductTypeID,
			&i.UnitPriceWithoutVat,
			&i.UnitPriceWithVat,
			&i.UnitPriceWithoutVatCurrency,
			&i.UnitPriceWithVatCurrency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.Category,
			&i.Subcategory,
			&i.ID_3,
			&i.Colours,
			&i.Sizes,
			&i.Segmentation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
