// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_product_type.sql

package db

import (
	"context"
	"database/sql"
)

const createProductType = `-- name: CreateProductType :one
INSERT INTO product_type (
	colours,
	sizes,
	segmentation
) VALUES (
	?, ?, ?
) RETURNING id, colours, sizes, segmentation
`

type CreateProductTypeParams struct {
	Colours      sql.NullString
	Sizes        sql.NullString
	Segmentation sql.NullString
}

func (q *Queries) CreateProductType(ctx context.Context, arg CreateProductTypeParams) (ProductType, error) {
	row := q.db.QueryRowContext(ctx, createProductType, arg.Colours, arg.Sizes, arg.Segmentation)
	var i ProductType
	err := row.Scan(
		&i.ID,
		&i.Colours,
		&i.Sizes,
		&i.Segmentation,
	)
	return i, err
}

const getProductType = `-- name: GetProductType :one
SELECT id, colours, sizes, segmentation
FROM product_type
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetProductType(ctx context.Context, id int64) (ProductType, error) {
	row := q.db.QueryRowContext(ctx, getProductType, id)
	var i ProductType
	err := row.Scan(
		&i.ID,
		&i.Colours,
		&i.Sizes,
		&i.Segmentation,
	)
	return i, err
}

const getProductTypes = `-- name: GetProductTypes :many
SELECT id, colours, sizes, segmentation
FROM product_type
ORDER BY id DESC
`

func (q *Queries) GetProductTypes(ctx context.Context) ([]ProductType, error) {
	rows, err := q.db.QueryContext(ctx, getProductTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductType
	for rows.Next() {
		var i ProductType
		if err := rows.Scan(
			&i.ID,
			&i.Colours,
			&i.Sizes,
			&i.Segmentation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
