// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_user.sql

package cchoice_db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO tbl_user (
	first_name,
	middle_name,
	last_name,
	email,
	password,
	mobile_no,
	user_type,
	status
) VALUES (
	?, ?, ?, ?,
	?, ?, ?, ?
)
`

type CreateUserParams struct {
	FirstName  string
	MiddleName string
	LastName   string
	Email      string
	Password   string
	MobileNo   string
	UserType   string
	Status     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.MobileNo,
		arg.UserType,
		arg.Status,
	)
	return err
}

const getUserByEMailAndUserType = `-- name: GetUserByEMailAndUserType :one
SELECT id
FROM tbl_user
WHERE
	email = ? AND
	user_type = ? AND
	status = 'ACTIVE'
LIMIT 1
`

type GetUserByEMailAndUserTypeParams struct {
	Email    string
	UserType string
}

func (q *Queries) GetUserByEMailAndUserType(ctx context.Context, arg GetUserByEMailAndUserTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserByEMailAndUserType, arg.Email, arg.UserType)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserHashedPassword = `-- name: GetUserHashedPassword :one
SELECT password
FROM tbl_user
WHERE
	user_type = 'API' AND
	status = 'ACTIVE' AND
	email = ?
LIMIT 1
`

func (q *Queries) GetUserHashedPassword(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserHashedPassword, email)
	var password string
	err := row.Scan(&password)
	return password, err
}
