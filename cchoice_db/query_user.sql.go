// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_user.sql

package cchoice_db

import (
	"context"
)

const checkUniqueEMailandMobileNo = `-- name: CheckUniqueEMailandMobileNo :one
SELECT
	EXISTS (
		SELECT 1
		FROM tbl_user
		WHERE
			email = ? OR
			mobile_no = ?
		LIMIT 1
	)
`

type CheckUniqueEMailandMobileNoParams struct {
	Email    string
	MobileNo string
}

func (q *Queries) CheckUniqueEMailandMobileNo(ctx context.Context, arg CheckUniqueEMailandMobileNoParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUniqueEMailandMobileNo, arg.Email, arg.MobileNo)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO tbl_user (
	first_name,
	middle_name,
	last_name,
	email,
	password,
	mobile_no,
	user_type,
	status
) VALUES (
	?, ?, ?, ?,
	?, ?, ?, ?
) RETURNING id
`

type CreateUserParams struct {
	FirstName  string
	MiddleName string
	LastName   string
	Email      string
	Password   string
	MobileNo   string
	UserType   string
	Status     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.MobileNo,
		arg.UserType,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEMailAndUserType = `-- name: GetUserByEMailAndUserType :one
SELECT id
FROM tbl_user
WHERE
	email = ? AND
	user_type = ? AND
	status = 'ACTIVE'
LIMIT 1
`

type GetUserByEMailAndUserTypeParams struct {
	Email    string
	UserType string
}

func (q *Queries) GetUserByEMailAndUserType(ctx context.Context, arg GetUserByEMailAndUserTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserByEMailAndUserType, arg.Email, arg.UserType)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEMailAndUserTypeAndToken = `-- name: GetUserByEMailAndUserTypeAndToken :one
SELECT tbl_user.id
FROM tbl_user
INNER JOIN tbl_auth ON tbl_auth.user_id = tbl_user.id
WHERE
	email = ? AND
	user_type = ? AND
	status = 'ACTIVE' AND
	tbl_auth.token = ?
LIMIT 1
`

type GetUserByEMailAndUserTypeAndTokenParams struct {
	Email    string
	UserType string
	Token    string
}

func (q *Queries) GetUserByEMailAndUserTypeAndToken(ctx context.Context, arg GetUserByEMailAndUserTypeAndTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserByEMailAndUserTypeAndToken, arg.Email, arg.UserType, arg.Token)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, middle_name, last_name, email, password, mobile_no, user_type, status, created_at, updated_at, deleted_at
FROM tbl_user
WHERE
	id = ?
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (TblUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i TblUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.MobileNo,
		&i.UserType,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserEMailAndMobileNoByID = `-- name: GetUserEMailAndMobileNoByID :one
SELECT email, mobile_no
FROM tbl_user
WHERE id = ?
LIMIT 1
`

type GetUserEMailAndMobileNoByIDRow struct {
	Email    string
	MobileNo string
}

func (q *Queries) GetUserEMailAndMobileNoByID(ctx context.Context, id int64) (GetUserEMailAndMobileNoByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserEMailAndMobileNoByID, id)
	var i GetUserEMailAndMobileNoByIDRow
	err := row.Scan(&i.Email, &i.MobileNo)
	return i, err
}

const getUserForAuth = `-- name: GetUserForAuth :one
SELECT
	tbl_user.id,
	tbl_user.password,
	tbl_auth.otp_enabled
FROM tbl_user
INNER JOIN tbl_auth ON tbl_auth.user_id = tbl_user.id
WHERE
	user_type = 'API' AND
	status = 'ACTIVE' AND
	email = ?
LIMIT 1
`

type GetUserForAuthRow struct {
	ID         int64
	Password   string
	OtpEnabled bool
}

func (q *Queries) GetUserForAuth(ctx context.Context, email string) (GetUserForAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getUserForAuth, email)
	var i GetUserForAuthRow
	err := row.Scan(&i.ID, &i.Password, &i.OtpEnabled)
	return i, err
}

const getUserWithAuthByID = `-- name: GetUserWithAuthByID :one
SELECT
	tbl_user.id,
	tbl_auth.otp_enabled
FROM tbl_user
INNER JOIN tbl_auth ON tbl_auth.user_id = tbl_user.id
WHERE
	tbl_user.id = ?
LIMIT 1
`

type GetUserWithAuthByIDRow struct {
	ID         int64
	OtpEnabled bool
}

func (q *Queries) GetUserWithAuthByID(ctx context.Context, id int64) (GetUserWithAuthByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithAuthByID, id)
	var i GetUserWithAuthByIDRow
	err := row.Scan(&i.ID, &i.OtpEnabled)
	return i, err
}
