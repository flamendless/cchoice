// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_product_specs.sql

package cchoice_db

import (
	"context"
	"database/sql"
)

const createProductSpecs = `-- name: CreateProductSpecs :one
INSERT INTO tbl_product_specs (
	colours,
	sizes,
	segmentation,
	part_number,
	power,
	capacity,
	scope_of_supply
) VALUES (
	?, ?, ?, ?,
	?, ?, ?
) RETURNING id, colours, sizes, segmentation, part_number, power, capacity, scope_of_supply
`

type CreateProductSpecsParams struct {
	Colours       sql.NullString
	Sizes         sql.NullString
	Segmentation  sql.NullString
	PartNumber    sql.NullString
	Power         sql.NullString
	Capacity      sql.NullString
	ScopeOfSupply sql.NullString
}

func (q *Queries) CreateProductSpecs(ctx context.Context, arg CreateProductSpecsParams) (TblProductSpec, error) {
	row := q.db.QueryRowContext(ctx, createProductSpecs,
		arg.Colours,
		arg.Sizes,
		arg.Segmentation,
		arg.PartNumber,
		arg.Power,
		arg.Capacity,
		arg.ScopeOfSupply,
	)
	var i TblProductSpec
	err := row.Scan(
		&i.ID,
		&i.Colours,
		&i.Sizes,
		&i.Segmentation,
		&i.PartNumber,
		&i.Power,
		&i.Capacity,
		&i.ScopeOfSupply,
	)
	return i, err
}

const getProductSpecs = `-- name: GetProductSpecs :many
SELECT id, colours, sizes, segmentation, part_number, power, capacity, scope_of_supply
FROM tbl_product_specs
ORDER BY id DESC
`

func (q *Queries) GetProductSpecs(ctx context.Context) ([]TblProductSpec, error) {
	rows, err := q.db.QueryContext(ctx, getProductSpecs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblProductSpec
	for rows.Next() {
		var i TblProductSpec
		if err := rows.Scan(
			&i.ID,
			&i.Colours,
			&i.Sizes,
			&i.Segmentation,
			&i.PartNumber,
			&i.Power,
			&i.Capacity,
			&i.ScopeOfSupply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSpecsByID = `-- name: GetProductSpecsByID :one
SELECT id, colours, sizes, segmentation, part_number, power, capacity, scope_of_supply
FROM tbl_product_specs
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetProductSpecsByID(ctx context.Context, id int64) (TblProductSpec, error) {
	row := q.db.QueryRowContext(ctx, getProductSpecsByID, id)
	var i TblProductSpec
	err := row.Scan(
		&i.ID,
		&i.Colours,
		&i.Sizes,
		&i.Segmentation,
		&i.PartNumber,
		&i.Power,
		&i.Capacity,
		&i.ScopeOfSupply,
	)
	return i, err
}
