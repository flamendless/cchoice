// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_category.sql

package cchoice_db

import (
	"context"
	"database/sql"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO tbl_product_category (
	product_id,
	category,
	subcategory
) VALUES (
	?, ?, ?
) RETURNING id, product_id, category, subcategory
`

type CreateProductCategoryParams struct {
	ProductID   int64
	Category    sql.NullString
	Subcategory sql.NullString
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, arg.ProductID, arg.Category, arg.Subcategory)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Category,
		&i.Subcategory,
	)
	return i, err
}

const getProductCategories = `-- name: GetProductCategories :many
SELECT id, product_id, category, subcategory
FROM tbl_product_category
ORDER BY category DESC
`

func (q *Queries) GetProductCategories(ctx context.Context) ([]TblProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblProductCategory
	for rows.Next() {
		var i TblProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Category,
			&i.Subcategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCategoriesByProductID = `-- name: GetProductCategoriesByProductID :many
SELECT id, product_id, category, subcategory
FROM tbl_product_category
WHERE product_id = ?
ORDER BY id
`

func (q *Queries) GetProductCategoriesByProductID(ctx context.Context, productID int64) ([]TblProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductCategoriesByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblProductCategory
	for rows.Next() {
		var i TblProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Category,
			&i.Subcategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCategoryByCategory = `-- name: GetProductCategoryByCategory :one
SELECT id, product_id, category, subcategory
FROM tbl_product_category
WHERE category = ?
LIMIT 1
`

func (q *Queries) GetProductCategoryByCategory(ctx context.Context, category sql.NullString) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByCategory, category)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Category,
		&i.Subcategory,
	)
	return i, err
}

const getProductCategoryByCategoryAndSubcategory = `-- name: GetProductCategoryByCategoryAndSubcategory :one
SELECT id, product_id, category, subcategory
FROM tbl_product_category
WHERE category = ? AND subcategory = ?
LIMIT 1
`

type GetProductCategoryByCategoryAndSubcategoryParams struct {
	Category    sql.NullString
	Subcategory sql.NullString
}

func (q *Queries) GetProductCategoryByCategoryAndSubcategory(ctx context.Context, arg GetProductCategoryByCategoryAndSubcategoryParams) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByCategoryAndSubcategory, arg.Category, arg.Subcategory)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Category,
		&i.Subcategory,
	)
	return i, err
}

const getProductCategoryByID = `-- name: GetProductCategoryByID :one
SELECT id, product_id, category, subcategory
FROM tbl_product_category
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetProductCategoryByID(ctx context.Context, id int64) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByID, id)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Category,
		&i.Subcategory,
	)
	return i, err
}

const getProductCategoryByProductID = `-- name: GetProductCategoryByProductID :one
SELECT id, product_id, category, subcategory
FROM tbl_product_category
WHERE product_id = ?
LIMIT 1
`

func (q *Queries) GetProductCategoryByProductID(ctx context.Context, productID int64) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByProductID, productID)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Category,
		&i.Subcategory,
	)
	return i, err
}

const getProductCategoryBySubcategory = `-- name: GetProductCategoryBySubcategory :one
SELECT id, product_id, category, subcategory
FROM tbl_product_category
WHERE subcategory = ?
LIMIT 1
`

func (q *Queries) GetProductCategoryBySubcategory(ctx context.Context, subcategory sql.NullString) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryBySubcategory, subcategory)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Category,
		&i.Subcategory,
	)
	return i, err
}
