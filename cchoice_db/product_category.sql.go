// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_category.sql

package cchoice_db

import (
	"context"
	"database/sql"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO tbl_product_category (
	category,
	subcategory
) VALUES (
	?, ?
) RETURNING id, category, subcategory, promoted_at_homepage
`

type CreateProductCategoryParams struct {
	Category    sql.NullString
	Subcategory sql.NullString
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, arg.Category, arg.Subcategory)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Subcategory,
		&i.PromotedAtHomepage,
	)
	return i, err
}

const createProductsCategories = `-- name: CreateProductsCategories :one
INSERT INTO tbl_products_categories (
	product_id,
	category_id
) VALUES (
	?, ?
) RETURNING id, category_id, product_id
`

type CreateProductsCategoriesParams struct {
	ProductID  int64
	CategoryID int64
}

func (q *Queries) CreateProductsCategories(ctx context.Context, arg CreateProductsCategoriesParams) (TblProductsCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductsCategories, arg.ProductID, arg.CategoryID)
	var i TblProductsCategory
	err := row.Scan(&i.ID, &i.CategoryID, &i.ProductID)
	return i, err
}

const getProductCategoriesByPromoted = `-- name: GetProductCategoriesByPromoted :many
;

SELECT id, category, subcategory
FROM tbl_product_category
WHERE promoted_at_homepage = ?
LIMIT ?
`

type GetProductCategoriesByPromotedParams struct {
	PromotedAtHomepage sql.NullBool
	Limit              int64
}

type GetProductCategoriesByPromotedRow struct {
	ID          int64
	Category    sql.NullString
	Subcategory sql.NullString
}

func (q *Queries) GetProductCategoriesByPromoted(ctx context.Context, arg GetProductCategoriesByPromotedParams) ([]GetProductCategoriesByPromotedRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductCategoriesByPromoted, arg.PromotedAtHomepage, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductCategoriesByPromotedRow
	for rows.Next() {
		var i GetProductCategoriesByPromotedRow
		if err := rows.Scan(&i.ID, &i.Category, &i.Subcategory); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCategoryByCategory = `-- name: GetProductCategoryByCategory :one
SELECT id, category, subcategory, promoted_at_homepage
FROM tbl_product_category
WHERE category = ?
LIMIT 1
`

func (q *Queries) GetProductCategoryByCategory(ctx context.Context, category sql.NullString) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByCategory, category)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Subcategory,
		&i.PromotedAtHomepage,
	)
	return i, err
}

const getProductCategoryByCategoryAndSubcategory = `-- name: GetProductCategoryByCategoryAndSubcategory :one
SELECT id, category, subcategory, promoted_at_homepage
FROM tbl_product_category
WHERE category = ? AND subcategory = ?
LIMIT 1
`

type GetProductCategoryByCategoryAndSubcategoryParams struct {
	Category    sql.NullString
	Subcategory sql.NullString
}

func (q *Queries) GetProductCategoryByCategoryAndSubcategory(ctx context.Context, arg GetProductCategoryByCategoryAndSubcategoryParams) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByCategoryAndSubcategory, arg.Category, arg.Subcategory)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Subcategory,
		&i.PromotedAtHomepage,
	)
	return i, err
}

const getProductCategoryByID = `-- name: GetProductCategoryByID :one
SELECT id, category, subcategory, promoted_at_homepage
FROM tbl_product_category
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetProductCategoryByID(ctx context.Context, id int64) (TblProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByID, id)
	var i TblProductCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Subcategory,
		&i.PromotedAtHomepage,
	)
	return i, err
}

const setInitialPromotedProductCategory = `-- name: SetInitialPromotedProductCategory :many
UPDATE tbl_product_category
SET promoted_at_homepage = true
WHERE
	category IN (
		'small-angle-grinders',
		'impact-drills',
		'cordless-drill-driver',
		'cut-off-saw',
		'circular-saws',
		'demolition-hammer-hex',
		'demolition-hammer-sds-max'
	)
RETURNING id
`

func (q *Queries) SetInitialPromotedProductCategory(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, setInitialPromotedProductCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
