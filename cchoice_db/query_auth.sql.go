// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_auth.sql

package cchoice_db

import (
	"context"
	"database/sql"
)

const createInitialAuth = `-- name: CreateInitialAuth :exec
INSERT INTO tbl_auth (
	user_id,
	token,
	otp_enabled,
	otp_status
) VALUES (
	?, '', false, 'INITIAL'
)
`

func (q *Queries) CreateInitialAuth(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, createInitialAuth, userID)
	return err
}

const enrollOTP = `-- name: EnrollOTP :exec
UPDATE tbl_auth SET
	otp_enabled = true,
	otp_secret = ?,
	recovery_codes = ?,
	otp_status = 'INITIAL'
WHERE id = ?
`

type EnrollOTPParams struct {
	OtpSecret     sql.NullString
	RecoveryCodes sql.NullString
	ID            int64
}

func (q *Queries) EnrollOTP(ctx context.Context, arg EnrollOTPParams) error {
	_, err := q.db.ExecContext(ctx, enrollOTP, arg.OtpSecret, arg.RecoveryCodes, arg.ID)
	return err
}

const finishOTPEnrollment = `-- name: FinishOTPEnrollment :exec
;

UPDATE tbl_auth SET
	otp_status = 'ENROLLED'
WHERE
	id = ? AND
	otp_enabled = true
`

func (q *Queries) FinishOTPEnrollment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, finishOTPEnrollment, id)
	return err
}

const getAuthForEnrollmentByUserID = `-- name: GetAuthForEnrollmentByUserID :one
SELECT id
FROM tbl_auth
WHERE
	user_id = ? AND
	otp_enabled = false AND
	otp_status = 'INITIAL'
LIMIT 1
`

func (q *Queries) GetAuthForEnrollmentByUserID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAuthForEnrollmentByUserID, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAuthForOTPValidation = `-- name: GetAuthForOTPValidation :one
SELECT id, otp_secret
FROM tbl_auth
WHERE
	user_id = ? AND
	otp_enabled = true AND
	otp_status = 'INITIAL'
LIMIT 1
`

type GetAuthForOTPValidationRow struct {
	ID        int64
	OtpSecret sql.NullString
}

func (q *Queries) GetAuthForOTPValidation(ctx context.Context, userID int64) (GetAuthForOTPValidationRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthForOTPValidation, userID)
	var i GetAuthForOTPValidationRow
	err := row.Scan(&i.ID, &i.OtpSecret)
	return i, err
}

const getAuthOTP = `-- name: GetAuthOTP :one
;

SELECT otp_enabled, otp_status
FROM tbl_auth
WHERE user_id = ?
`

type GetAuthOTPRow struct {
	OtpEnabled bool
	OtpStatus  string
}

func (q *Queries) GetAuthOTP(ctx context.Context, userID int64) (GetAuthOTPRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthOTP, userID)
	var i GetAuthOTPRow
	err := row.Scan(&i.OtpEnabled, &i.OtpStatus)
	return i, err
}

const needOTP = `-- name: NeedOTP :exec
;

UPDATE tbl_auth SET
	otp_status = 'SENT_CODE'
WHERE
	user_id = ?
`

func (q *Queries) NeedOTP(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, needOTP, userID)
	return err
}

const updateAuthTokenByUserID = `-- name: UpdateAuthTokenByUserID :exec
UPDATE tbl_auth SET token = ? WHERE user_id = ?
`

type UpdateAuthTokenByUserIDParams struct {
	Token  string
	UserID int64
}

func (q *Queries) UpdateAuthTokenByUserID(ctx context.Context, arg UpdateAuthTokenByUserIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthTokenByUserID, arg.Token, arg.UserID)
	return err
}
