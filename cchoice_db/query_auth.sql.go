// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query_auth.sql

package cchoice_db

import (
	"context"
	"database/sql"
)

const createAuth = `-- name: CreateAuth :exec
INSERT INTO tbl_auth (
	user_id,
	token,
	otp_enabled
) VALUES (
	?, ?, ?
)
`

type CreateAuthParams struct {
	UserID     int64
	Token      string
	OtpEnabled bool
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) error {
	_, err := q.db.ExecContext(ctx, createAuth, arg.UserID, arg.Token, arg.OtpEnabled)
	return err
}

const enrollOTP = `-- name: EnrollOTP :exec
UPDATE tbl_auth SET
	otp_enabled = false,
	otp_secret = ?,
	recovery_codes = ?
WHERE id = ?
`

type EnrollOTPParams struct {
	OtpSecret     sql.NullString
	RecoveryCodes sql.NullString
	ID            int64
}

func (q *Queries) EnrollOTP(ctx context.Context, arg EnrollOTPParams) error {
	_, err := q.db.ExecContext(ctx, enrollOTP, arg.OtpSecret, arg.RecoveryCodes, arg.ID)
	return err
}

const getAuthIDAndSecretByUserIDAndUnvalidatedOTP = `-- name: GetAuthIDAndSecretByUserIDAndUnvalidatedOTP :one
SELECT id, otp_secret
FROM tbl_auth
WHERE
	user_id = ? AND
	otp_enabled = false AND
	otp_secret IS NOT NULL AND otp_secret != '' AND
	recovery_codes IS NOT NULL AND recovery_codes != ''
LIMIT 1
`

type GetAuthIDAndSecretByUserIDAndUnvalidatedOTPRow struct {
	ID        int64
	OtpSecret sql.NullString
}

func (q *Queries) GetAuthIDAndSecretByUserIDAndUnvalidatedOTP(ctx context.Context, userID int64) (GetAuthIDAndSecretByUserIDAndUnvalidatedOTPRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthIDAndSecretByUserIDAndUnvalidatedOTP, userID)
	var i GetAuthIDAndSecretByUserIDAndUnvalidatedOTPRow
	err := row.Scan(&i.ID, &i.OtpSecret)
	return i, err
}

const getAuthIDByUserID = `-- name: GetAuthIDByUserID :one
SELECT id
FROM tbl_auth
WHERE
	user_id = ?
LIMIT 1
`

func (q *Queries) GetAuthIDByUserID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAuthIDByUserID, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateAuthTokenByUserID = `-- name: UpdateAuthTokenByUserID :exec
UPDATE tbl_auth SET token = ? WHERE user_id = ?
`

type UpdateAuthTokenByUserIDParams struct {
	Token  string
	UserID int64
}

func (q *Queries) UpdateAuthTokenByUserID(ctx context.Context, arg UpdateAuthTokenByUserIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthTokenByUserID, arg.Token, arg.UserID)
	return err
}

const validateInitialOTP = `-- name: ValidateInitialOTP :exec
;

UPDATE tbl_auth SET
	otp_enabled = true
WHERE
	id = ? AND
	otp_enabled = false AND
	otp_secret IS NOT NULL AND otp_secret != '' AND
	recovery_codes IS NOT NULL AND recovery_codes != ''
`

func (q *Queries) ValidateInitialOTP(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, validateInitialOTP, id)
	return err
}
