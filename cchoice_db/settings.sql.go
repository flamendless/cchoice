// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: settings.sql

package cchoice_db

import (
	"context"
	"strings"
)

const getSettingsByNames = `-- name: GetSettingsByNames :many
SELECT
	id, name, value
FROM tbl_settings
WHERE
	name IN (/*SLICE:name*/?)
LIMIT 100
`

func (q *Queries) GetSettingsByNames(ctx context.Context, name []string) ([]TblSetting, error) {
	query := getSettingsByNames
	var queryParams []interface{}
	if len(name) > 0 {
		for _, v := range name {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:name*/?", strings.Repeat(",?", len(name))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:name*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblSetting
	for rows.Next() {
		var i TblSetting
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
